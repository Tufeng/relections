1、初始化版本库时会发生什么情况？为什么你需要这样做？
答：多一个git文件。为了记录每一次commit
2、暂存区与工作目录和版本库有何不同？你认为它具有什么价值？
答：在git status状态显示中，工作目录是本地文件储存区，add后将文件移入暂存区
中待commit，此时文件被跟踪tracked，当选择commit之后，staging area内的文件
移入版本库repository中之后，同步多人协作，其他人可下载修改。
3、如何使用暂存区确保为每项逻辑更改进行一次提交？
答：暂存区是commit之前必须经过的步骤，如果要实现一个功能，在working directory
内做了修改之后，可以实现，通过“git add 修改文件名” 所有修改应用于暂存区，可以通过
git status 进行暂存区的文件修改状态查看，当需要commit时，就可以一次性，将新的功能进行‘commit’
并且添加说明，这样避免混乱，且回顾时可以有根据有逻辑地进行查询。
4、在哪些情况下，分支可以帮助你有序地组织历史记录？分支将如何提供帮助？
答：在想进行创造性改变/实验时，branch可以有效地进行帮助开发者进行逻辑上的分拆，
待这个branch 被验证OK后，再进行合并。首先git branch 查询master内所有已建立的branch，
输入 “git checkout branch的名称”，把编辑文件从master转到这个branch上面，然后git branch
可以看到，*在需要更改的branch名字前面，此时打开文件，进行修改，git add修改的文件，git status
查看修改后文件的状态，git commit 提交message 保存后，这个branch 已经得到了全部的更改。
此时输入 git status 可看到On branch easy-mode（branch name）
nothing to commit, working tree clean.
5、图表如何帮助你直观显示分支结构？
答：从上一个问题到这个问题中间的课程，讲课的人英语语法运用的真的很好，以至于我看英文字幕
翻译不过来，单词都认识，就是不知道该怎么翻译，字幕翻译的也是硬生生，像是Google translate的杰作，
缺少连接词，整句看下来很费劲。
图标画出来，知道逻辑顺序，以便知道自己的修改部分在哪个位置，commit的代码对哪些起作用，哪些不起作用。
6、将两个分支合并到一起有何结果？为什么我们在图表中表示它的方式是那样的？
答：合并之后，各个commit进行合并到master，删除原来branch上面标签。保留commit。
此时用git show 可以查看每一个commit与它父级的差别。图表表现是为了逻辑显示，
更加直观看出各部分更改内容。
7、 Git 的自动合并与始终手动进行合并各有何优缺点？
答：自动优点：时效性高 缺点：不是在合适的节点合并，早成master更改，给之后代码维护带麻烦
手动优点：避免了自动的缺点  缺点：手动合并麻烦一点
